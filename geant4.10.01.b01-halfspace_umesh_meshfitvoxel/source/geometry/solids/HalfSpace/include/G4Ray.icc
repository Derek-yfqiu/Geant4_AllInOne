//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id$
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4Ray.icc
//
// Implementation of inline methods of G4Ray
// --------------------------------------------------------------------

inline
G4Point3D G4Ray::GetPoint(G4double i) const
{
  return G4Point3D( start+i*dir );
}

inline
G4double G4Ray::GetPPoint(const G4Point3D& p) const
{
  // |dir|==1
  return (p-start)*dir;
}

inline
const G4Vector3D& G4Ray::GetDir() const
{
  return dir;
}

inline
const G4Point3D& G4Ray::GetStart() const
{
  return start;
}

inline
void G4Ray::SetDir(const G4Vector3D& dir0)
{
  dir= dir0.unit();
}

inline
void G4Ray::SetStart(const G4Point3D& start0)
{
  start= start0;
}

inline
void G4Ray::Init(const G4Point3D& start0, const G4Vector3D& dir0)
{
  start= start0;
  dir=   dir0;
  RayCheck();
  CreatePlanes();
}

inline
G4double G4Ray::P2(G4double x) const
{
  return(x*x);
}

inline
G4int G4Ray::NearZero(G4double val, G4double epsilon) const
{
  return ( ((val) > -epsilon) && ((val) < epsilon) );
}

inline
void G4Ray::Vsetall(G4Vector3D &a, G4double i) 
{
  a.setX(i); a.setY(i); a.setZ(i);
}
